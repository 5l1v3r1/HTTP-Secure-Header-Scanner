<?php

namespace Tests\Unit;

use App\Crawler;
use GuzzleHttp\Client;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;
use Mockery;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class CrawlerTest extends TestCase
{

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        Mockery::close();
    }

    /** @test */
    public function crawler_gets_all_links_on_one_site()
    {
        $sampleBody = file_get_contents(base_path() . "/tests/Unit/example.org.html");
        $client = $this->getMockedGuzzleClient([
            new Response(200, [], $sampleBody),
            new Response(200, [], $sampleBody),
        ]);

        $crawler = new Crawler('testId', 'http://testdomain', collect(), collect(), $client);
        $links = $crawler->extractLinks('http://testdomain');

        $this->assertCount(1, $links);
    }

    /** @test */
    public function crawler_crawls_all_links_on_one_site()
    {
        $sampleBody = file_get_contents(base_path() . "/tests/Unit/example.org.html");
        $client = $this->getMockedGuzzleClient([
            // Delivers 2 responses so the crawler can follow
            new Response(200, [], $sampleBody),
            new Response(200, [], $sampleBody),
        ]);

        $crawler = new Crawler('testId', 'http://testdomain', collect(['www.iana.org']), collect(), $client);
        $links = $crawler->extractAllLinks('http://testdomain');

        $this->assertCount(2, $links);
    }


    /**
     * This method sets and activates the GuzzleHttp Mocking functionality.
     * @param array $responses
     * @return Client
     */
    protected function getMockedGuzzleClient(array $responses) {
        $mock = new MockHandler( $responses );
        $handler = HandlerStack::create( $mock );
        return (new Client( ["handler" => $handler] )) ;
    }
}
